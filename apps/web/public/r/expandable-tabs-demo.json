{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "expandable-tabs-demo",
  "type": "registry:component",
  "title": "Expandable Tabs",
  "description": "Expandable tabs component.",
  "dependencies": [
    "motion",
    "react",
    "usehooks-ts"
  ],
  "files": [
    {
      "path": "registry/components/expandable-tabs-demo.tsx",
      "content": "\"use client\";\r\n\r\nimport { Bell, HelpCircle, Home, Settings, Shield } from \"lucide-react\";\r\nimport { AnimatePresence, motion } from \"motion/react\";\r\nimport { type JSX, useRef, useState } from \"react\";\r\nimport { useOnClickOutside } from \"usehooks-ts\";\r\n\r\ninterface Tab {\r\n  title: string;\r\n  icon: JSX.Element;\r\n  type?: never;\r\n}\r\n\r\ninterface Separator {\r\n  type: \"separator\";\r\n  title?: never;\r\n  icon?: never;\r\n}\r\n\r\ntype TabItem = Tab | Separator;\r\n\r\nexport default function ExpandableTabs() {\r\n  const [selected, setSelected] = useState<number | null>(null);\r\n  // Fix: Initialize ref with HTMLDivElement type\r\n  const outsideClickRef = useRef<HTMLDivElement>(null!);\r\n\r\n  useOnClickOutside(outsideClickRef, () => setSelected(null));\r\n\r\n  const tabs: TabItem[] = [\r\n    { title: \"Dashboard\", icon: <Home size={16} /> },\r\n    { title: \"Notifications\", icon: <Bell size={16} /> },\r\n    { type: \"separator\" },\r\n    { title: \"Settings\", icon: <Settings size={16} /> },\r\n    { title: \"Support\", icon: <HelpCircle size={16} /> },\r\n    { title: \"Security\", icon: <Shield size={16} /> },\r\n  ];\r\n\r\n  const buttonVariants = {\r\n    initial: {\r\n      gap: 0,\r\n      paddingLeft: \".5rem\",\r\n      paddingRight: \".5rem\",\r\n    },\r\n    animate: (isSelected: boolean) => ({\r\n      gap: isSelected ? \".5rem\" : 0,\r\n      paddingLeft: isSelected ? \"1rem\" : \".5rem\",\r\n      paddingRight: isSelected ? \"1rem\" : \".5rem\",\r\n    }),\r\n  };\r\n\r\n  const spanVariants = {\r\n    initial: { width: 0, opacity: 0 },\r\n    animate: { width: \"auto\", opacity: 1 },\r\n    exit: { width: 0, opacity: 0 },\r\n  };\r\n\r\n  const transition = { delay: 0.1, type: \"spring\", bounce: 0, duration: 0.6 };\r\n\r\n  const Separator = () => (\r\n    <div className=\"mx-1 h-[24px] w-[1.2px] bg-[#555555]\" aria-hidden=\"true\" />\r\n  );\r\n\r\n  return (\r\n    <div className=\"mx-auto flex items-center justify-center\">\r\n      <div\r\n        ref={outsideClickRef}\r\n        className=\"flex flex-wrap items-center gap-2 rounded-2xl border border-neutral-800 bg-neutral-900 p-1 shadow-[0_6px_24px_rgba(34,42,53,0.12),0_0_0_1px_rgba(34,42,53,0.05),0_4px_8px_rgba(34,42,53,0.08),0_1px_1px_rgba(34,42,53,0.10)]\"\r\n      >\r\n        {tabs.map((tab, index) => {\r\n          if (tab.type === \"separator\") {\r\n            return <Separator key={`separator-${index}`} />;\r\n          }\r\n          return (\r\n            <motion.button\r\n              key={tab.title}\r\n              variants={buttonVariants}\r\n              initial={false}\r\n              animate=\"animate\"\r\n              custom={selected === index}\r\n              onClick={() => setSelected(index)}\r\n              transition={transition}\r\n              className={`${selected === index\r\n                  ? \"bg-neutral-800 text-opacity-100 [&]:text-blue-500\"\r\n                  : \"hover:bg-neutral-800\"\r\n                } relative flex items-center rounded-xl px-4 py-2 font-medium text-white text-xs transition-colors duration-300`}\r\n            >\r\n              {tab.icon}\r\n              <AnimatePresence initial={false}>\r\n                {selected === index && (\r\n                  <motion.span\r\n                    variants={spanVariants}\r\n                    initial=\"initial\"\r\n                    animate=\"animate\"\r\n                    exit=\"exit\"\r\n                    transition={transition}\r\n                    className=\"overflow-hidden\"\r\n                  >\r\n                    {tab.title}\r\n                  </motion.span>\r\n                )}\r\n              </AnimatePresence>\r\n            </motion.button>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/expandable-tabs-demo.tsx"
    }
  ]
}