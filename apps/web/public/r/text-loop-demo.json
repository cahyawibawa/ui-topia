{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-loop-demo",
  "type": "registry:component",
  "description": "Text animation that transitions between multiple items, creating an engaging looping effect",
  "title": "Text Loop",
  "dependencies": [
    "clsx",
    "motion",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/text-loop-demo.tsx",
      "content": "\"use client\";\n\nimport TextLoop from \"@/components/ui/text-loop\";\n\nexport default function TextLoopDemo() {\n  return (\n    <h3 className=\"inline-flex whitespace-pre-wrap text-base\">\n      Some days you're{\" \"}\n      <TextLoop\n        className=\"overflow-y-clip font-medium text-yellow-600\"\n        transition={{\n          type: \"spring\",\n          stiffness: 900,\n          damping: 80,\n          mass: 10,\n        }}\n        interval={2.5}\n        variants={{\n          initial: {\n            y: 20,\n            rotateX: 90,\n            opacity: 0,\n            filter: \"blur(4px)\",\n          },\n          animate: {\n            y: 0,\n            rotateX: 0,\n            opacity: 1,\n            filter: \"blur(0px)\",\n          },\n          exit: {\n            y: -20,\n            rotateX: -90,\n            opacity: 0,\n            filter: \"blur(4px)\",\n          },\n        }}\n      >\n        <span>Healing</span>\n        <span>Feeling</span>\n        <span>Thriving</span>\n        <span>Surviving</span>\n      </TextLoop>\n    </h3>\n  );\n}\n",
      "path": "registry/components/text-loop-demo.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function absoluteUrl(path: string) {\n  return `${process.env.NEXT_PUBLIC_APP_URL}${path}`;\n}\n",
      "path": "registry/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/text-loop.tsx",
      "content": "\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  AnimatePresence,\n  type Transition,\n  type Variants,\n  motion,\n} from \"motion/react\";\nimport { Children, useEffect, useState } from \"react\";\n\nexport type TextLoopProps = {\n  children: React.ReactNode[];\n  className?: string;\n  interval?: number;\n  transition?: Transition;\n  variants?: Variants;\n  onIndexChange?: (index: number) => void;\n};\n\nexport default function TextLoop({\n  children,\n  className,\n  interval = 2,\n  transition = { duration: 0.3 },\n  variants,\n  onIndexChange,\n}: TextLoopProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const items = Children.toArray(children);\n\n  useEffect(() => {\n    const intervalMs = interval * 1000;\n\n    const timer = setInterval(() => {\n      setCurrentIndex((current) => {\n        const next = (current + 1) % items.length;\n        onIndexChange?.(next);\n        return next;\n      });\n    }, intervalMs);\n    return () => clearInterval(timer);\n  }, [items.length, interval, onIndexChange]);\n\n  const motionVariants: Variants = {\n    initial: { y: 20, opacity: 0 },\n    animate: { y: 0, opacity: 1 },\n    exit: { y: -20, opacity: 0 },\n  };\n\n  return (\n    <div className={cn(\"relative inline-block whitespace-nowrap\", className)}>\n      <AnimatePresence mode=\"popLayout\" initial={false}>\n        <motion.div\n          key={currentIndex}\n          initial=\"initial\"\n          animate=\"animate\"\n          exit=\"exit\"\n          transition={transition}\n          variants={variants || motionVariants}\n        >\n          {items[currentIndex]}\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "path": "registry/ui/text-loop.tsx"
    }
  ],
  "categories": [
    "motion",
    "react"
  ]
}
