{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "action-search-input-demo",
  "type": "registry:component",
  "description": "Search input that show command menu when focused.",
  "title": "Action Search Input",
  "dependencies": [
    "clsx",
    "lucide-react",
    "motion",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/action-search-input-demo.tsx",
      "content": "\"use client\";\n\nimport useDebounce from \"@/hooks/use-debounce\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  AudioLines,\n  BarChart2,\n  Globe,\n  InfinityIcon,\n  Search,\n  Send,\n  Video,\n} from \"lucide-react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { useEffect, useState } from \"react\";\n\ninterface Action {\n  id: string;\n  label: string;\n  icon: React.ReactNode;\n  description?: string;\n  short?: string;\n  end?: string;\n}\n\ninterface SearchResult {\n  actions: Action[];\n}\n\nconst allActions = [\n  {\n    id: \"1\",\n    label: \"Agent\",\n    icon: <InfinityIcon className=\"h-4 w-4 text-blue-500\" />,\n    description: \"Deepseek-v3\",\n    short: \"⌘K\",\n    end: \"Agent\",\n  },\n  {\n    id: \"2\",\n    label: \"Summarize\",\n    icon: <BarChart2 className=\"h-4 w-4 text-orange-500\" />,\n    description: \"gpt-4o\",\n    short: \"⌘cmd+p\",\n    end: \"Command\",\n  },\n  {\n    id: \"3\",\n    label: \"Screen Studio\",\n    icon: <Video className=\"h-4 w-4 text-purple-500\" />,\n    description: \"gpt-4o\",\n    short: \"\",\n    end: \"Application\",\n  },\n  {\n    id: \"4\",\n    label: \"Code Voice\",\n    icon: <AudioLines className=\"h-4 w-4 text-green-500\" />,\n    description: \"claude 3.7-sonnet\",\n    short: \"\",\n    end: \"Command\",\n  },\n  {\n    id: \"5\",\n    label: \"Translate\",\n    icon: <Globe className=\"h-4 w-4 text-blue-500\" />,\n    description: \"gpt-4o\",\n    short: \"\",\n    end: \"Command\",\n  },\n];\n\nfunction ActionSearchInput({ actions = allActions }: { actions?: Action[] }) {\n  const [query, setQuery] = useState(\"\");\n  const [result, setResult] = useState<SearchResult | null>(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [selectedAction, setSelectedAction] = useState<Action | null>(null);\n  const debouncedQuery = useDebounce(query, 200);\n\n  useEffect(() => {\n    if (!isFocused) {\n      setResult(null);\n      return;\n    }\n\n    if (!debouncedQuery) {\n      setResult({ actions: allActions });\n      return;\n    }\n\n    const normalizedQuery = debouncedQuery.toLowerCase().trim();\n    const filteredActions = allActions.filter((action) => {\n      const searchableText = action.label.toLowerCase();\n      return searchableText.includes(normalizedQuery);\n    });\n\n    setResult({ actions: filteredActions });\n  }, [debouncedQuery, isFocused]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n    setIsTyping(true);\n  };\n\n  const container = {\n    hidden: { opacity: 0, height: 0 },\n    show: {\n      opacity: 1,\n      height: \"auto\",\n      transition: {\n        height: {\n          duration: 0.4,\n        },\n        staggerChildren: 0.1,\n      },\n    },\n    exit: {\n      opacity: 0,\n      height: 0,\n      transition: {\n        height: {\n          duration: 0.3,\n        },\n        opacity: {\n          duration: 0.2,\n        },\n      },\n    },\n  };\n\n  const item = {\n    hidden: { opacity: 0, y: 20 },\n    show: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.3,\n      },\n    },\n    exit: {\n      opacity: 0,\n      y: -10,\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n\n  // Reset selectedAction when focusing the input\n  const handleFocus = () => {\n    setSelectedAction(null);\n    setIsFocused(true);\n  };\n\n  return (\n    <div className=\"mx-auto w-full max-w-xl\">\n      <div className=\"relative mx-5 flex min-h-[280px] flex-col items-center justify-start\">\n        <div className=\"sticky top-0 z-10 w-full max-w-sm bg-background pb-1\">\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"How can I help you today?\"\n              value={query}\n              onChange={handleInputChange}\n              onFocus={handleFocus}\n              onBlur={() => setTimeout(() => setIsFocused(false), 200)}\n              className=\"h-9 rounded-lg py-1.5 pr-9 pl-3 text-sm focus-visible:ring-offset-0\"\n            />\n            <div className=\"-translate-y-1/2 absolute top-1/2 right-3 h-4 w-4\">\n              <AnimatePresence mode=\"popLayout\">\n                {query.length > 0 ? (\n                  <motion.div\n                    key=\"send\"\n                    initial={{ y: -20, opacity: 0 }}\n                    animate={{ y: 0, opacity: 1 }}\n                    exit={{ y: 20, opacity: 0 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <Send className=\"h-4 w-4 text-gray-400 dark:text-gray-500\" />\n                  </motion.div>\n                ) : (\n                  <motion.div\n                    key=\"search\"\n                    initial={{ y: -20, opacity: 0 }}\n                    animate={{ y: 0, opacity: 1 }}\n                    exit={{ y: 20, opacity: 0 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <Search className=\"h-4 w-4 text-gray-400 dark:text-gray-500\" />\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"w-full max-w-sm\">\n          <AnimatePresence>\n            {isFocused && result && !selectedAction && (\n              <motion.div\n                className=\"mt-1 w-full overflow-hidden rounded-md border bg-white shadow-xs dark:border-zinc-800 dark:bg-zinc-900\"\n                variants={container}\n                initial=\"hidden\"\n                animate=\"show\"\n                exit=\"exit\"\n              >\n                <motion.ul>\n                  {result.actions.map((action) => (\n                    <motion.li\n                      key={action.id}\n                      className=\"flex cursor-pointer items-center justify-between rounded-md px-3 py-2 hover:bg-gray-100 dark:hover:bg-zinc-800\"\n                      variants={item}\n                      layout\n                      onClick={() => setSelectedAction(action)}\n                    >\n                      <div className=\"flex items-center justify-between gap-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-gray-500\">{action.icon}</span>\n                          <span className=\"font-medium text-gray-900 text-sm dark:text-gray-100\">\n                            {action.label}\n                          </span>\n                          <span className=\"text-gray-400 text-xs\">\n                            {action.description}\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-gray-400 text-xs\">\n                          {action.short}\n                        </span>\n                        <span className=\"text-right text-gray-400 text-xs\">\n                          {action.end}\n                        </span>\n                      </div>\n                    </motion.li>\n                  ))}\n                </motion.ul>\n                <div className=\"mt-2 border-gray-100 border-t px-3 py-2 dark:border-gray-800\">\n                  <div className=\"flex items-center justify-between text-gray-500 text-xs\">\n                    <span>Press ⌘K to open commands</span>\n                    <span>ESC to cancel</span>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ActionSearchInput;\n",
      "path": "registry/components/action-search-input-demo.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "path": "registry/lib/utils.ts"
    },
    {
      "type": "registry:hook",
      "target": "hooks/use-debounce.ts",
      "content": "import { useEffect, useState } from \"react\";\n\nfunction useDebounce<T>(value: T, delay = 500): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nexport default useDebounce;\n",
      "path": "registry/hooks/use-debounce.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/input.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport * as React from \"react\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-lg border border-input bg-background px-3 py-2 text-foreground text-sm shadow-black/5 shadow-sm transition-shadow placeholder:text-muted-foreground/70 focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px] focus-visible:ring-ring/20 disabled:cursor-not-allowed disabled:opacity-50\",\n          type === \"search\" &&\n            \"[&::-webkit-search-cancel-button]:appearance-none [&::-webkit-search-decoration]:appearance-none [&::-webkit-search-results-button]:appearance-none [&::-webkit-search-results-decoration]:appearance-none\",\n          type === \"file\" &&\n            \"p-0 pr-3 text-muted-foreground/70 italic file:me-3 file:h-full file:border-0 file:border-input file:border-r file:border-solid file:bg-transparent file:px-3 file:font-medium file:text-foreground file:text-sm file:not-italic\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n",
      "path": "registry/ui/input.tsx"
    }
  ],
  "categories": [
    "motion",
    "react",
    "tailwindcss"
  ]
}
