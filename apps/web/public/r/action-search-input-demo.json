{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "action-search-input-demo",
  "type": "registry:component",
  "title": "Action Search Input",
  "description": "Search input that show command menu when focused.",
  "dependencies": [
    "lucide-react",
    "motion",
    "react",
    "usehooks-ts"
  ],
  "registryDependencies": [
    "https://uitopia.vercel.app/r/input.json",
    "https://uitopia.vercel.app/r/use-debounce.json"
  ],
  "files": [
    {
      "path": "registry/components/action-search-input-demo.tsx",
      "content": "\"use client\";\n\nimport {\n  AudioLines,\n  BarChart2,\n  Globe,\n  InfinityIcon,\n  Search,\n  Send,\n  Video,\n} from \"lucide-react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { useEffect, useState } from \"react\";\nimport useDebounce from \"@/registry/hooks/use-debounce\";\nimport { Input } from \"@/registry/ui/input\";\n\ninterface Action {\n  id: string;\n  label: string;\n  icon: React.ReactNode;\n  description?: string;\n  short?: string;\n  end?: string;\n}\n\ninterface SearchResult {\n  actions: Action[];\n}\n\nconst allActions = [\n  {\n    description: \"Deepseek-v3\",\n    end: \"Agent\",\n    icon: <InfinityIcon className=\"h-4 w-4 text-blue-500\" />,\n    id: \"1\",\n    label: \"Agent\",\n    short: \"⌘K\",\n  },\n  {\n    description: \"gpt-4o\",\n    end: \"Command\",\n    icon: <BarChart2 className=\"h-4 w-4 text-orange-500\" />,\n    id: \"2\",\n    label: \"Summarize\",\n    short: \"⌘cmd+p\",\n  },\n  {\n    description: \"gpt-4o\",\n    end: \"Application\",\n    icon: <Video className=\"h-4 w-4 text-purple-500\" />,\n    id: \"3\",\n    label: \"Screen Studio\",\n    short: \"\",\n  },\n  {\n    description: \"claude 3.7-sonnet\",\n    end: \"Command\",\n    icon: <AudioLines className=\"h-4 w-4 text-green-500\" />,\n    id: \"4\",\n    label: \"Code Voice\",\n    short: \"\",\n  },\n  {\n    description: \"gpt-4o\",\n    end: \"Command\",\n    icon: <Globe className=\"h-4 w-4 text-blue-500\" />,\n    id: \"5\",\n    label: \"Translate\",\n    short: \"\",\n  },\n];\n\nfunction ActionSearchInput({ actions = allActions }: { actions?: Action[] }) {\n  const [query, setQuery] = useState(\"\");\n  const [result, setResult] = useState<SearchResult | null>(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [_isTyping, setIsTyping] = useState(false);\n  const [selectedAction, setSelectedAction] = useState<Action | null>(null);\n  const debouncedQuery = useDebounce(query, 200);\n\n  useEffect(() => {\n    if (!isFocused) {\n      setResult(null);\n      return;\n    }\n\n    if (!debouncedQuery) {\n      setResult({ actions: allActions });\n      return;\n    }\n\n    const normalizedQuery = debouncedQuery.toLowerCase().trim();\n    const filteredActions = allActions.filter((action) => {\n      const searchableText = action.label.toLowerCase();\n      return searchableText.includes(normalizedQuery);\n    });\n\n    setResult({ actions: filteredActions });\n  }, [debouncedQuery, isFocused]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n    setIsTyping(true);\n  };\n\n  const container = {\n    exit: {\n      height: 0,\n      opacity: 0,\n      transition: {\n        height: {\n          duration: 0.3,\n        },\n        opacity: {\n          duration: 0.2,\n        },\n      },\n    },\n    hidden: { height: 0, opacity: 0 },\n    show: {\n      height: \"auto\",\n      opacity: 1,\n      transition: {\n        height: {\n          duration: 0.4,\n        },\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const item = {\n    exit: {\n      opacity: 0,\n      transition: {\n        duration: 0.2,\n      },\n      y: -10,\n    },\n    hidden: { opacity: 0, y: 20 },\n    show: {\n      opacity: 1,\n      transition: {\n        duration: 0.3,\n      },\n      y: 0,\n    },\n  };\n\n  // Reset selectedAction when focusing the input\n  const handleFocus = () => {\n    setSelectedAction(null);\n    setIsFocused(true);\n  };\n\n  return (\n    <div className=\"h-full w-full\">\n      <div className=\"sticky top-0 z-10 w-full bg-background pb-1\">\n        <div className=\"relative w-full\">\n          <Input\n            className=\"h-9 w-full rounded-lg py-1.5 pr-9 pl-3 text-sm focus-visible:ring-offset-0\"\n            onBlur={() => setTimeout(() => setIsFocused(false), 200)}\n            onChange={handleInputChange}\n            onFocus={handleFocus}\n            placeholder=\"How can I help you today?\"\n            type=\"text\"\n            value={query}\n          />\n          <div className=\"-translate-y-1/2 absolute top-1/2 right-3 h-4 w-4\">\n            <AnimatePresence mode=\"popLayout\">\n              {query.length > 0 ? (\n                <motion.div\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: 20 }}\n                  initial={{ opacity: 0, y: -20 }}\n                  key=\"send\"\n                  transition={{ duration: 0.2 }}\n                >\n                  <Send className=\"h-4 w-4 text-gray-400 dark:text-gray-500\" />\n                </motion.div>\n              ) : (\n                <motion.div\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: 20 }}\n                  initial={{ opacity: 0, y: -20 }}\n                  key=\"search\"\n                  transition={{ duration: 0.2 }}\n                >\n                  <Search className=\"h-4 w-4 text-gray-400 dark:text-gray-500\" />\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        </div>\n      </div>\n      <div className=\"flex-1 w-full\">\n        <AnimatePresence>\n          {isFocused && result && !selectedAction && (\n            <motion.div\n              animate=\"show\"\n              className=\"mt-1 w-full overflow-hidden rounded-md border bg-white shadow-xs dark:border-zinc-800 dark:bg-zinc-900\"\n              exit=\"exit\"\n              initial=\"hidden\"\n              variants={container}\n            >\n              <motion.ul>\n                {result.actions.map((action) => (\n                  <motion.li\n                    className=\"flex cursor-pointer items-center justify-between rounded-md px-3 py-2 hover:bg-gray-100 dark:hover:bg-zinc-800\"\n                    key={action.id}\n                    layout\n                    onClick={() => setSelectedAction(action)}\n                    variants={item}\n                  >\n                    <div className=\"flex items-center justify-between gap-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-gray-500\">{action.icon}</span>\n                        <span className=\"font-medium text-gray-900 text-sm dark:text-gray-100\">\n                          {action.label}\n                        </span>\n                        <span className=\"text-gray-400 text-xs\">\n                          {action.description}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-gray-400 text-xs\">\n                        {action.short}\n                      </span>\n                      <span className=\"text-right text-gray-400 text-xs\">\n                        {action.end}\n                      </span>\n                    </div>\n                  </motion.li>\n                ))}\n              </motion.ul>\n              <div className=\"mt-2 border-gray-100 border-t px-3 py-2 dark:border-gray-800\">\n                <div className=\"flex items-center justify-between text-gray-500 text-xs\">\n                  <span>Press ⌘K to open commands</span>\n                  <span>ESC to cancel</span>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n}\n\nexport default ActionSearchInput;\n",
      "type": "registry:component",
      "target": "components/action-search-input-demo.tsx"
    }
  ],
  "categories": [
    "motion",
    "react",
    "tailwindcss"
  ]
}