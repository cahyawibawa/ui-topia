{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cd-demo",
  "type": "registry:component",
  "title": "Disc",
  "description": "CD demo component.",
  "dependencies": [
    "@number-flow/react",
    "motion",
    "react"
  ],
  "files": [
    {
      "path": "registry/components/cd-demo.tsx",
      "content": "\"use client\";\n\nimport NumberFlow from \"@number-flow/react\";\nimport { MotionConfig, motion, type Transition } from \"motion/react\";\nimport Image from \"next/image\";\nimport React from \"react\";\n\nconst Context = React.createContext<{\n  status: string;\n  setStatus: React.Dispatch<React.SetStateAction<string>>;\n}>({ status: \"\", setStatus: () => null });\n\nconst transition: Transition = { type: \"spring\", bounce: 0, duration: 0.4 };\n\nfunction CD() {\n  const ctx = React.useContext(Context);\n  const isPressed = ctx.status === \"pressed\";\n  const [active, setActive] = React.useState(false);\n\n  return (\n    <motion.div\n      initial={{ rotate: 0, x: \"-50%\", y: -108, borderRadius: 110 }}\n      animate={\n        isPressed\n          ? {\n              y: -108,\n              transition: { ...transition, duration: 1.2 },\n            }\n          : active\n            ? {\n                rotate: 0,\n                width: \"100%\",\n                height: \"100%\",\n                y: 0,\n                borderRadius: 0,\n                border: 0,\n                transition: { ...transition, duration: 1.2 },\n              }\n            : {\n                rotate: 360,\n                y: -108,\n                transition: {\n                  ease: \"linear\",\n                  duration: 5,\n                  repeat: Number.POSITIVE_INFINITY,\n                },\n              }\n      }\n      whileHover={{\n        scale: 1.03,\n      }}\n      onTapStart={() => {\n        ctx.setStatus(\"pressed\");\n      }}\n      onTap={() => {\n        setActive((prev) => !prev);\n        ctx.setStatus(\"idle\");\n      }}\n      onTapCancel={() => {\n        setActive(false);\n        ctx.setStatus(\"idle\");\n      }}\n      className=\"absolute left-1/2 z-10 flex size-[220px] origin-center select-none items-center justify-center overflow-hidden border border-[#a89f9f] bg-gray-400 shadow-[0_0_60px_-10px_rgba(0,0,0,0.6)]\"\n    >\n      <Image\n        src=\"/images/currents-evangelion.jpg\"\n        alt=\"currents album\"\n        className=\"pointer-events-none select-none object-cover\"\n        width={220}\n        height={220}\n      />\n      <motion.div\n        animate={active ? { opacity: 0 } : {}}\n        className=\"-translate-x-1/2 -translate-y-1/2 absolute top-1/2 left-1/2 flex items-center justify-center\"\n      >\n        <div className=\"-translate-x-1/2 -translate-y-1/2 absolute top-1/2 left-1/2 size-[66px] rounded-full bg-gray-500/20 backdrop-blur-sm\" />\n        <div className=\"-translate-x-1/2 -translate-y-1/2 absolute top-1/2 left-1/2 size-[62px] rounded-full border-[2.5px] border-gray-200/10 border-dotted\" />\n        <div className=\"-translate-x-1/2 -translate-y-1/2 absolute top-1/2 left-1/2 size-[55px] rounded-full border border-white bg-[#9799a5]\" />\n        <div className=\"-translate-x-1/2 -translate-y-1/2 absolute top-1/2 left-1/2 size-[37px] rounded-full bg-[#c9c2c7]\" />\n        <div className=\"-translate-x-1/2 -translate-y-1/2 absolute top-1/2 left-1/2 size-[30px] rounded-full bg-[#c9c2c7]\" />\n        <div className=\"-translate-x-1/2 -translate-y-1/2 absolute top-1/2 left-1/2 size-[28px] rounded-full bg-[#e3dee4]\" />\n        <div className=\"-translate-x-1/2 -translate-y-1/2 absolute top-1/2 left-1/2 size-[24px] rounded-full border border-[#a6a4a5] bg-[#bebcba] shadow-[0_0_8px_-4px_rgba(0,0,0,0.25)_inset]\" />\n      </motion.div>\n    </motion.div>\n  );\n}\n\nexport default function CDPlayer() {\n  const [status, setStatus] = React.useState(\"idle\");\n  const [time, setTime] = React.useState(10);\n  const isNotIdle = status !== \"idle\";\n\n  React.useEffect(() => {\n    function handleEscape(e: KeyboardEvent) {\n      if (e.key === \"Escape\") {\n        setStatus(\"idle\");\n      }\n    }\n    window.addEventListener(\"keydown\", handleEscape);\n    return () => window.removeEventListener(\"keydown\", handleEscape);\n  }, [setStatus]);\n\n  React.useEffect(() => {\n    const interval = setInterval(() => setTime((prev) => prev + 1), 1000);\n    return () => clearInterval(interval);\n  }, [setTime]);\n\n  return (\n    <Context.Provider value={{ status, setStatus }}>\n      <MotionConfig transition={transition}>\n        <div className=\"relative size-[220px] overflow-hidden rounded-2xl border border-[#cacaca] bg-[#e3e3e3] font-medium tracking-tight shadow-[0_2px_6px_-1.5px_rgba(0,0,0,0.06)]\">\n          <CD />\n          <motion.div\n            animate={isNotIdle ? { scale: 0.95, filter: \"blur(2px)\" } : {}}\n            className=\"absolute bottom-4 flex w-full flex-col items-center gap-2\"\n          >\n            <div className=\"relative flex h-4 w-fit items-center justify-center gap-0.5\">\n              <motion.div\n                initial={{ height: 8 }}\n                animate={{\n                  height: 2,\n                  transition: {\n                    repeat: Number.POSITIVE_INFINITY,\n                    repeatType: \"reverse\",\n                    duration: 1,\n                    type: \"linear\",\n                  },\n                }}\n                className=\"h-4 w-0.5 rounded-full bg-[#999592]\"\n              />\n              <motion.div\n                initial={{ height: 2 }}\n                animate={{\n                  height: 14,\n                  transition: {\n                    repeat: Number.POSITIVE_INFINITY,\n                    repeatType: \"reverse\",\n                    duration: 1.5,\n                    type: \"linear\",\n                  },\n                }}\n                className=\"h-4 w-0.5 rounded-full bg-[#999592]\"\n              />\n              <motion.div\n                initial={{ height: 5 }}\n                animate={{\n                  height: 2,\n                  transition: {\n                    repeat: Number.POSITIVE_INFINITY,\n                    repeatType: \"reverse\",\n                    duration: 0.8,\n                    type: \"linear\",\n                  },\n                }}\n                className=\"h-2 w-0.5 rounded-full bg-[#999592]\"\n              />\n              <motion.div\n                initial={{ height: 2 }}\n                animate={{\n                  height: 10,\n                  transition: {\n                    repeat: Number.POSITIVE_INFINITY,\n                    repeatType: \"reverse\",\n                    duration: 1.8,\n                    type: \"linear\",\n                  },\n                }}\n                className=\"h-3 w-0.5 rounded-full bg-[#999592]\"\n              />\n              <motion.div\n                initial={{ height: 3 }}\n                animate={{\n                  height: 2,\n                  transition: {\n                    repeat: Number.POSITIVE_INFINITY,\n                    repeatType: \"reverse\",\n                    duration: 0.6,\n                    type: \"linear\",\n                  },\n                }}\n                className=\"h-1 w-0.5 rounded-full bg-[#999592]\"\n              />\n            </div>\n\n            <div className=\"flex flex-col items-center gap-1 text-xs\">\n              <p className=\"text-[#a09c99]\">Tame Impala</p>\n              <p className=\"font-medium text-[#272622]\">Reality in Motion</p>\n              <div className=\"relative h-[2px] w-6 bg-[#cbc7c6]\">\n                <motion.div\n                  initial={{ width: \"45%\" }}\n                  animate={{ width: \"50%\", transition: { duration: 12 } }}\n                  className=\"absolute top-0 left-0 h-full bg-[#7a787a]\"\n                />\n              </div>\n              <p className=\"text-[#272622]\">\n                <span className=\"text-[#272622]\">\n                  1:\n                  <NumberFlow value={time} />\n                </span>\n                <span className=\"px-[0.3ch] text-[#a5a3a1]\">/</span>\n                <span className=\"text-[#a5a3a1]\">4:12</span>\n              </p>\n            </div>\n          </motion.div>\n        </div>\n      </MotionConfig>\n    </Context.Provider>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/cd-demo.tsx"
    }
  ]
}